
https://github.com/ilyagoz/netology-diploma


Document #:1661416976
Operation codeGIT
Extra information:276111897987 შემოსავლების სამსახურის მიერ გაწეული მომსახურების საფასური



ssh -t ubuntu@citytours.ge -i ~/.ssh/alexander-key-to-aws.pem -oStrictHostKeyChecking=accept-new ssh ubuntu@gitlab.citytours.ge -i /home/ubuntu/.ssh/alexander-key-to-aws.pem -oStrictHostKeyChecking=accept-new


curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash

sudo EXTERNAL_URL="https://gitlab.citytours.ge" apt-get install gitlab-ee

cat /etc/gitlab/initial_root_password




ssh -t ubuntu@3.248.124.34 -i ~/.ssh/alexander-key-to-aws.pem -oStrictHostKeyChecking=accept-new ssh ubuntu@runner.citytours.ge -i /home/ubuntu/.ssh/alexander-key-to-aws.pem -oStrictHostKeyChecking=accept-new

wget https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_amd64.deb

dpkg -i gitlab-runner_amd64.deb




Коллеги, пароль для рута и токен для раннера можно задать самостоятельно через файл gitlab.rb Это самый простой вариант, не мучайтесь)


# cat config.toml
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800
  listen_address = "192.168.1.8:8093" #  listen on all available interfaces on port 8093

[[runners]]
  name = "runner-1"
  url = "https://gitlab.citytours.ge"
  token = "vUcmCn57c8rgBFoo1PKR6KDA7S4ZvjzmYlT9fqgZshQ="
  executor = "ssh"
  tls-ca-file = "/etc/gitlab-runner/certs/gitlab.citytours.ge.crt"


systemctl status gitlab-runsvdir.service

systemctl restart gitlab-runner.service


sudo GITLAB_ROOT_PASSWORD="<strongpassword>" EXTERNAL_URL="http://gitlab.example.com" apt install gitlab-ee


sudo gitlab-runner register \
    --non-interactive \
    --url "https://gitlab.citytours.ge" \
    --registration-token "2222222222" \
    --description "codechecker" \
    --executor "ssh"
    
gitlab-runner register   --non-interactive   --url "https://gitlab.citytours.ge"   --registration-token "4444444444"   --executor "docker"   --docker-image alpine:latest   --description "docker-runner"   --maintenance-note "Free-form maintainer notes about this runner"   --tag-list "docker,aws"   --run-untagged="true"   --locked="false"   --access-level="not_protected"
    
    
external_url 'https://gitlab.citytours.ge'
letsencrypt['enable'] = false
gitlab_rails['initial_root_password'] = "2222222222"
gitlab_rails['initial_shared_runners_registration_token'] = "3333333333"

#### Toggle if root password should be printed to STDOUT during initialization
gitlab_rails['display_initial_root_password'] = true

#### Toggle if initial root password should be written to /etc/gitlab/initial_root_password
gitlab_rails['store_initial_root_password'] = true




sudo gitlab-runner register \
  --non-interactive \
  --url "https://gitlab.citytours.ge" \
  --registration-token "2222222222" \
  --executor "docker" \
  --docker-image alpine:latest \
  --description "docker-runner" \
  --maintenance-note "Free-form maintainer notes about this runner" \
  --tag-list "docker,aws" \
  --run-untagged="true" \
  --locked="false" \
  --access-level="not_protected"
  
  
  
Чтобы создать проект и в нём репку из командной строки надо чтобы у юзера был ssh ключ вбит, но его сначала нет его надо как-то добавить
https://askubuntu.com/questions/1162757/how-can-i-add-an-ssh-key-to-gitlab-through-a-bash-executable

создаём токн для юзера root  инстр тут https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token
sudo gitlab-rails runner "token = User.find_by_username('root').personal_access_tokens.create(scopes: [:read_user, :read_repository], name: 'Automation token'); token.set_token('token-string-here123'); token.save!"



sudo apt-get install     ca-certificates     curl     gnupg     lsb-release
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose


gitlab-runner register --non-interactive --url "https://gitlab.citytours.ge" --registration-token "4444444444" --executor "docker"  --docker-image alpine:latest --description "docker-runner" --maintenance-note "this runner can makes all" --tag-list "docker,aws" --run-untagged="true" --locked="false" --access-level="not_protected"




gitlab-runner unregister --all-runners


работающий вариант
gitlab-runner register --non-interactive --url "http://gitlab.citytours.ge" --registration-token "4444444444" --executor "docker"  --docker-image "ubuntu:latest" --description "docker-runner" --maintenance-note "this runner can makes all" --tag-list "docker,aws" --run-untagged="true" --locked="false" --access-level="not_protected" --docker-network-mode="host" --docker-volumes "/home/ubuntu/.ssh:/ssh"







<?php phpinfo(); ?>




stages:
  - test

variables:
  GIT_CURL_VERBOSE: 1
  GIT_TRACE: 1

unit-test-job:
  stage: test
  script:
    - echo "Hello World"




stages:
  - test

variables:
  GIT_CURL_VERBOSE: 1
  GIT_TRACE: 1

unit-test-job:
  stage: test
  script:
    - echo "Hello World"
    - echo ${ssh_key} > alexander-key-to-aws.pem
    - echo ==========================================
#    - cat alexander-key-to-aws.pem
    - echo "$CI_COMMIT_TAG"
    - echo "$CI_PROJECT_DIR"
    - rsync -e "ssh -i alexander-key-to-aws.pem -o StrictHostKeyChecking=no" --archive --verbose --progress --no-perms --omit-dir-times $CI_PROJECT_DIR/wordpress ubuntu@app.citytours.ge:/var/www/wordpress
    
=====================================================

stages:
  - deploy-to-site

#variables:
#  GIT_CURL_VERBOSE: 1
#  GIT_TRACE: 1

deploy-to-site:
  stage: deploy-to-site
  before_script:
    - echo "1. Устанавливаем git" 
    - apt update
    - apt install git -y  

  script:
    - echo "Сейчас мы закачаем все файлы из папки wordpress репозитория на сайт" 
    - echo =====================================================================
    
    - echo "2. Клонируем репозиторий, для получения файлов для сайта" 
    - git clone $CI_REPOSITORY_URL

    - echo "3. Копируем файлы на веб-сервер" 
    - scp -i /ssh/alexander-key-to-aws.pem -o StrictHostKeyChecking=no $CI_PROJECT_TITLE/wordpress/* ubuntu@app.citytours.ge:/var/www/wordpress
    
    
    
====================
phpinfo.php
<?php phpinfo(); ?>